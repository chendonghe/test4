{"version":3,"file":"sw.js","sourceRoot":"","sources":["../worker/sw.ts"],"names":[],"mappings":"AAGA,MAAM,QAAQ,GAAG,iBAAiB,CAAC;AACnC,MAAM,OAAO,UAAmB,CAAC;AACjC,MAAM,IAAI,YAAgB,CAAC;AAC3B,MAAM,SAAS,GAAG,GAAG,QAAQ,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;AAEnD,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE;IAClC,IAAI,CAAC,WAAW,EAAE,CAAC;AACvB,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC,KAAK,EAAE,EAAE;IACxC,KAAK,CAAC,SAAS,CACX,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;QAC9B,OAAO,OAAO,CAAC,GAAG,CAAU;YACxB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;YACpB,GAAG,UAAU;iBACR,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE;gBAClB,OAAO,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,SAAS,KAAK,SAAS,CAAC;YACrE,CAAC,CAAC;iBACD,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;gBACf,OAAO,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACpC,CAAC,CAAC;SACT,CAAC,CAAC;IACP,CAAC,CAAC,CACL,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;IACrC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,KAAK,KAAK,EAAE;QAChC,OAAO;KACV;IAED,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAEvC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC,MAAM,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;QACrF,OAAO;KACV;IAED,KAAK,CAAC,WAAW,CACb,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAC5B,CAAC,KAAK,EAAE,EAAE,CACN,KAAK;QACL,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAClC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;YACnC,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;gBACzB,OAAO,QAAQ,CAAC;aACnB;YAED,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;YAC3C,OAAO,QAAQ,CAAC;QACpB,CAAC,CAAC,CACL,CACR,CACJ,CAAC;AACN,CAAC,CAAC,CAAC","sourcesContent":["declare const self: ServiceWorkerGlobalScope;\nexport {};\n\nconst APP_NAME = \"akari-lrc-maker\";\nconst VERSION = MetaData.version;\nconst HASH = MetaData.hash;\nconst CACHENAME = `${APP_NAME}-${VERSION}-${HASH}`;\n\nself.addEventListener(\"install\", () => {\n    self.skipWaiting();\n});\n\nself.addEventListener(\"activate\", (event) => {\n    event.waitUntil(\n        caches.keys().then((cacheNames) => {\n            return Promise.all<unknown>([\n                self.clients.claim(),\n                ...cacheNames\n                    .filter((cacheName) => {\n                        return cacheName.startsWith(APP_NAME) && cacheName !== CACHENAME;\n                    })\n                    .map((cacheName) => {\n                        return caches.delete(cacheName);\n                    }),\n            ]);\n        }),\n    );\n});\n\nself.addEventListener(\"fetch\", (event) => {\n    if (event.request.method !== \"GET\") {\n        return;\n    }\n\n    const url = new URL(event.request.url);\n\n    if (!/(?:\\.css|\\.js|\\.svg)$/i.test(url.pathname) && url.origin !== self.location.origin) {\n        return;\n    }\n\n    event.respondWith(\n        caches.match(event.request).then(\n            (match) =>\n                match ||\n                caches.open(CACHENAME).then((cache) =>\n                    fetch(event.request).then((response) => {\n                        if (response.status !== 200) {\n                            return response;\n                        }\n\n                        cache.put(event.request, response.clone());\n                        return response;\n                    }),\n                ),\n        ),\n    );\n});\n"]}